---
- name: create a vpc
  ec2_vpc_net:
    name: "rosa-{{ cluster_name }}"
    cidr_block: "{{ rosa_vpc_cidr }}"
    region: "{{ rosa_region }}"
    dns_support: true
    dns_hostnames: true
  register: _vpc

- set_fact:
    vpc_id: "{{ _vpc.vpc.id }}"
    cluster_id: "{{ cluster_id | default('tbd') }}"

- name: create private subnets
  ec2_vpc_subnet:
    vpc_id: "{{ _vpc.vpc.id }}"
    cidr: "{{ item.cidr }}"
    az: "{{ item.az }}"
    purge_tags: false
    resource_tags: "{{ item.resource_tags }}"
  with_items: "{{ rosa_vpc_private_subnets }}"
  register: _private_subnets

- name: create public subnets
  ec2_vpc_subnet:
    vpc_id: "{{ _vpc.vpc.id }}"
    cidr: "{{ item.cidr }}"
    az: "{{ item.az }}"
    purge_tags: false
    resource_tags: "{{ item.resource_tags }}"
  with_items: "{{ rosa_vpc_public_subnets }}"
  register: _public_subnets

- name: figure out list of subnets
  set_fact:
    _private_subnet_ids: "{{ _private_subnets.results | default([]) | json_query('[*].subnet.id') }}"
    _public_subnet_ids:  "{{ _public_subnets.results  | default([]) | json_query('[*].subnet.id') }}"

# - name: get default security group for vpc
#   amazon.aws.ec2_security_group_info:
#     filters:
#       vpc-id: "{{ vpc_id }}"
#       group-name: "default"
#   register: _default_sg

- name: create security group for vpc endpoint for sts
  amazon.aws.ec2_security_group:
    name: "rosa-{{ cluster_name }}-sts-endpoint"
    description: allow traffic to STS endpoint
    vpc_id: "{{ vpc_id }}"
    rules:
      - proto: tcp
        ports: [443]
        cidr_ip: "{{ rosa_vpc_cidr }}"
        rule_desc: allow all on port 443
  register: _sts_endpoint_sg

- name: Create vpc endpoint for sts
  amazon.aws.ec2_vpc_endpoint:
    state: present
    vpc_id: "{{ vpc_id }}"
    service: "com.amazonaws.{{ rosa_region }}.sts"
    vpc_endpoint_subnets: "{{ _private_subnet_ids }}"
    vpc_endpoint_type: Interface
    vpc_endpoint_security_groups: ["{{ _sts_endpoint_sg.group_id }}"]
    tags:
      Name: "rosa-{{ cluster_name }}-sts"
  register: _sts_vpc_endpoint

- name: Create vpc endpoint for ec2
  amazon.aws.ec2_vpc_endpoint:
    state: present
    region: "{{ rosa_region }}"
    vpc_id: "{{ vpc_id }}"
    vpc_endpoint_subnets: "{{ _private_subnet_ids }}"
    vpc_endpoint_type: Interface
    vpc_endpoint_security_groups: ["{{ _sts_endpoint_sg.group_id }}"]
    service: "com.amazonaws.{{ rosa_region }}.ec2"
    tags:
      Name: "rosa-{{ cluster_name }}-sts"
  register: _vpc_endpoint_ec2

- name: Create vpc endpoint for elasticloadbalancing
  amazon.aws.ec2_vpc_endpoint:
    state: present
    region: "{{ rosa_region }}"
    vpc_id: "{{ vpc_id }}"
    vpc_endpoint_subnets: "{{ _private_subnet_ids }}"
    vpc_endpoint_type: Interface
    vpc_endpoint_security_groups: ["{{ _sts_endpoint_sg.group_id }}"]
    service: "com.amazonaws.{{ rosa_region }}.elasticloadbalancing"
    tags:
      Name: "rosa-{{ cluster_name }}-sts"
  register: _vpc_endpoints_elb

- name: attach VPC to transit gateway
  community.aws.ec2_transit_gateway_vpc_attachment:
    transit_gateway: "{{ tgw_id }}"
    name: "rosa-{{ cluster_name }}-tgw-attach"
    subnets: "{{ _private_subnet_ids }}"
    ipv6_support: False
    purge_subnets: False
    dns_support: True
  when: tgw_id is defined
    # appliance_mode_support: False

# - name: attach VPC to transit gateway
#   shell: |
#     aws ec2 create-transit-gateway-vpc-attachment \
#       --transit-gateway-id {{ tgw_id }} \
#       --vpc-id {{ vpc_id }} \
#       --subnet-ids {{ _private_subnet_ids | join(" ") }} \
#       || aws ec2 describe-transit-gateway-vpc-attachments \
#           --filters Name=vpc-id,Values={{ vpc_id }}

#     while [ "$(aws ec2 describe-transit-gateway-vpc-attachments \
#         --filters Name=vpc-id,Values={{ vpc_id }} \
#         --query 'TransitGatewayVpcAttachments[0].State' \
#         --output text)" != "available" ]; do
#       echo "Waiting for transit gateway attachment to become available..."
#       sleep 5
#     done
#   register: _tgw_attachment_cmd
#   changed_when: _tgw_attachment_cmd.stderr == ""
#   when: rosa_tgw_enabled | bool
      # ec2_transit_gateway_attachment:
      #   vpc_id: "{{ tgw_vpc_id }}"
      #   transit_gateway_id: "{{ tgw_id }}"
      #   tags: { "Name": "rosa-{{ cluster_name }}-tgw-attachment" }

# skip if using tgw
- block:
    - name: create internet gateway
      ec2_vpc_igw:
        vpc_id: "{{ _vpc.vpc.id }}"
        state: present
        # tags:
        #   Name: "rosa-public-{{ cluster_name }}-igw"
      register: _igw

    - name: create public subnet route table
      ec2_vpc_route_table:
        vpc_id: "{{ _vpc.vpc.id }}"
        tags:
          Name: "public-route-table"
        subnets: "{{ _public_subnet_ids }}"
        routes:
          - dest: 0.0.0.0/0
            gateway_id: "{{ _igw.gateway_id }}"

    # routes for private subnets
    - with_items: "{{ _public_subnets.results }}"
      include_tasks: nat_gateway_routes.yml
      loop_control:
        loop_var: outer_item

  when: (not rosa_tgw_enabled | bool) or
        (rosa_vpc_public_subnets | length > 0)

# when TGW enabled, we need to create the default route to use it
- block:
    - name: create private subnet route table
      ec2_vpc_route_table:
        vpc_id: "{{ _vpc.vpc.id }}"
        tags:
          Name: "rosa-private-nat-{{ item.subnet.id }}"
        subnets: "{{ item.subnet.id }}"
        routes:
          - dest: 0.0.0.0/0
            gateway_id: "{{ tgw_id }}"
      with_items: "{{ _private_subnets.results }}"
      register: _private_subnet_route_table

    # - fail:
    #     msg: |
    #       {{ _private_subnet_route_table | to_nice_yaml }}

    - set_fact:
        _route_table_ids: "{{ _private_subnet_route_table | json_query('results[*].route_table.id') }}"

    - name: Create vpc endpoint for s3
      amazon.aws.ec2_vpc_endpoint:
        state: present
        region: "{{ rosa_region }}"
        vpc_id: "{{ vpc_id }}"
        vpc_endpoint_type: Gateway
        service: "com.amazonaws.{{ rosa_region }}.s3"
        route_table_ids: "{{ _route_table_ids }}"
        tags:
          Name: "rosa-{{ cluster_name }}-sts"
      register: _vpc_endpoint_s3

    - name: Create vpc endpoint for s3
      amazon.aws.ec2_vpc_endpoint:
        state: present
        region: "{{ rosa_region }}"
        vpc_id: "{{ vpc_id }}"
        vpc_endpoint_type: Interface
        service: "com.amazonaws.{{ rosa_region }}.s3"
        route_table_ids: "{{ _route_table_ids }}"
        tags:
          Name: "rosa-{{ cluster_name }}-sts"
      register: _vpc_endpoint_s3

  when: rosa_tgw_enabled | bool
