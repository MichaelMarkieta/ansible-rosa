---
- ec2_vpc_net_info:
    filters:
      "tag:Name": "rosa-{{ cluster_name }}"
    region: "{{ rosa_region }}"
  register: vpc_info

- when: vpc_info.vpcs | length > 0
  block:
    - set_fact:
        vpc_id: "{{ vpc_info.vpcs[0].vpc_id }}"

    - debug:
        var: vpc_id

    ## NAT Gateway
    - ec2_vpc_nat_gateway_info:
        filters:
          vpc-id: "{{ vpc_id }}"
        region: "{{ rosa_region }}"
      register: _nat_gw_info

    - name: delete nat gateways
      ec2_vpc_nat_gateway:
        region: "{{ rosa_region }}"
        state: absent
        nat_gateway_id: "{{ item.nat_gateway_id }}"
        release_eip: yes
        wait: yes
      with_items: "{{ _nat_gw_info.result }}"
      when: item.state != 'deleted'

    # Internet Gateway
    - ec2_vpc_igw_info:
        region: "{{ rosa_region }}"
        filters:
          attachment.vpc-id: "{{ vpc_id }}"
      register: igw_info

    - name: delete internet gateway
      ec2_vpc_igw:
        region: "{{ rosa_region }}"
        vpc_id: "{{ vpc_id }}"
        state: absent

    # vpc endpoints
    - name: fetch vpc endpoints
      amazon.aws.ec2_vpc_endpoint_info:
        region: "{{ rosa_region }}"
        query: endpoints
        filters:
          vpc-id: "{{ vpc_id }}"
      register: _sts_vpc_endpoint

    - debug:
        msg: |
          VPC Endpoints: {{ _sts_vpc_endpoint.vpc_endpoints }}"

    - block:
        - name: delete vpc endpoints
          amazon.aws.ec2_vpc_endpoint:
            region: "{{ rosa_region }}"
            state: absent
            vpc_endpoint_id: "{{ item.vpc_endpoint_id }}"
          with_items: "{{ _sts_vpc_endpoint.vpc_endpoints }}"

        - name: wait for vpc endpoints to be deleted
          amazon.aws.ec2_vpc_endpoint_info:
            region: "{{ rosa_region }}"
            query: endpoints
            filters:
              vpc-id: "{{ vpc_id }}"
          register: _check_sts_vpc_endpoint
          until: _check_sts_vpc_endpoint.vpc_endpoints | length == 0
          retries: 60
          delay: 10
      when: _sts_vpc_endpoint.vpc_endpoints | length > 0

    - name: get vpc endpoint security group
      amazon.aws.ec2_security_group_info:
        region: "{{ rosa_region }}"
        filters:
          vpc-id: "{{ vpc_id }}"
          group-name: "rosa-{{ cluster_name }}-sts-endpoint"
      register: _sts_endpoint_sg

    - name: delete security group for vpc endpoint for sts
      amazon.aws.ec2_security_group:
        region: "{{ rosa_region }}"
        group_id: "{{ item.group_id }}"
        state: absent
      with_items: "{{ _sts_endpoint_sg.security_groups }}"

    - ec2_vpc_subnet_info:
        region: "{{ rosa_region }}"
        filters:
          vpc-id: "{{ vpc_id }}"
      register: subnet_info

    - name: delete private subnets
      ec2_vpc_subnet:
        region: "{{ rosa_region }}"
        state: absent
        vpc_id: "{{ vpc_id }}"
        cidr: "{{ item.cidr_block }}"
      with_items: "{{ subnet_info.subnets }}"
      when: item.state != 'deleted'

    ## Route Tables
    - ec2_vpc_route_table_info:
        region: "{{ rosa_region }}"
        filters:
          vpc-id: "{{ vpc_id }}"
      register: route_table_info

    - name: delete public subnet route table
      ec2_vpc_route_table:
        region: "{{ rosa_region }}"
        state: absent
        vpc_id: "{{ vpc_id }}"
        route_table_id: "{{ item.id }}"
        lookup: id
      with_items: "{{ route_table_info.route_tables }}"
      when: item.associations | length == 0

    ## VPC
    - name: delete the vpc
      ec2_vpc_net:
        state: absent
        # name: "rosa-{{ cluster_name }}"
        # cidr_block: "{{ rosa_vpc_cidr }}"
        vpc_id: "{{ vpc_id }}"
        region: "{{ rosa_region }}"

