---
- name: what cluster am i deleting?
  debug:
    msg: |
      ***************************************
      Preparing to delete {{ cluster_name }}.
      This task may take up to an hour.
      ***************************************
    verbosity: 0

- name: check if cluster exists
  rosa_cluster_info:
    name: "{{ cluster_name }}"
  register: _cluster_exists

## Delete the cluster
- when: _cluster_exists.cluster != {}
  block:
    - name: delete cluster
      rosa_cluster:
        name: "{{ cluster_name }}"
        state: absent
      register: _delete_cluster

    - name: verify the cluster is deleted
      rosa_cluster_info:
        name: "{{ cluster_name }}"
      register: _cluster_deleted
      changed_when: false
      failed_when: false
      until: _cluster_deleted.cluster == {}
      retries: 60
      delay: 10

    - fail:
        msg: "Cluster took too long to delete"
      when: _cluster_deleted.cluster != {}

# - debug:
#     var: _cluster_exists

- when: (_cluster_exists.cluster == {}) or
        ((_cluster_deleted.cluster is defined) and (_cluster_deleted.cluster == {}))
  block:
    - name: "collect list of operator roles"
      shell: |
        aws iam list-roles --query 'Roles[?starts_with(RoleName, `{{ cluster_name }}-openshift`) == `true`]'.RoleName --output json
      register: _operator_roles_txt
      changed_when: false

    - name: get oidc endpoint
      shell: |
        aws iam get-role --role-name "{{ (_operator_roles_txt.stdout | from_json)[0] }}" --query 'Role.AssumeRolePolicyDocument.Statement[?starts_with(Effect, `Allow`) == `true`].Principal.Federated' --output text
      register:
        _oidc_endpoint_txt
      when: _operator_roles_txt.stdout | from_json | length > 0

    - name: delete the operator roles
      shell: |
        POLICY=$(aws iam list-attached-role-policies --role-name {{ item }} --query 'AttachedPolicies[].PolicyArn' --output text)
        if [[ -n ${POLICY} ]]; then
          aws iam detach-role-policy --role-name {{ item }} --policy-arn ${POLICY}
        fi
        aws iam delete-role --role-name "{{ item }}"
      with_items: "{{ _operator_roles_txt.stdout | from_json }}"
      when: _operator_roles_txt.stdout | from_json | length > 0

    - name: delete the oidc endpoint
      shell: |
        aws iam get-open-id-connect-provider --open-id-connect-provider-arn "{{ _oidc_endpoint_txt.stdout }}" && \
          aws iam delete-open-id-connect-provider --open-id-connect-provider-arn "{{ _oidc_endpoint_txt.stdout }}"
      when: _oidc_endpoint_txt.stdout is defined
      failed_when: false
